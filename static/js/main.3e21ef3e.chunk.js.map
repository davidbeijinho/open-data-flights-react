{"version":3,"sources":["components/DropDown.js","lib/countries.js","lib/airports.js","lib/routes.js","actions/routeActions.js","actions/actionTypes.js","components/Radio.js","components/TablePage.js","actions/queryActions.js","components/MainPage.js","components/Datamap.js","components/MapPage.js","components/Menu.js","actions/appActions.js","components/App.js","serviceWorker.js","reducers/query.js","reducers/app.js","reducers/routes.js","reducers/index.js","store/store.js","index.js"],"names":["Option","_ref","id","value","label","react_default","a","createElement","key","DropDown","_ref2","onUpdate","list","Fragment","htmlFor","onChange","e","target","map","option","DropDown_Option","Object","assign","countryList","code","name","downloadCode","getColors","limit","colorRanges","airportsData","length","scaleLinear","domain","interpolate","d3","range","reduce","acc","index","ident","getAirportById","filter","parseRoutes","routes","year","data","values","v","parseInt","scaleSqrt","Math","min","apply","toConsumableArray","max","createRange","departureAirport","departure","airport","arrivalAirport","arrival","origin","latitude","longitude","destination","options","strokeWidth","strokeColor","greatArc","d","fetchPosts","dispatch","type","payload","requestPosts","fetch","country","measure","concat","process","toLowerCase","getFileUrl","then","response","json","routesdData","getRoutes","Radio","checked","o","getColumns","onChangeYear","baseCollums","whiteList","uniq","keys","flat","sort","indexOf","Header","components_Radio","accessor","Cell","row","columns","connect","state","query","onChangeCountry","onChangeMeasure","onLoadRoutesIfNeeded","getState","props","components_DropDown","measures","onClick","react_table_es","MainPage","MAP_CLEARING_PROPS","Datamap","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","resizeMap","bind","assertThisInitialized","responsive","window","addEventListener","drawMap","newProps","oldProps","some","propChangeRequiresMapClear","clear","removeEventListener","container","Array","from","childNodes","forEach","child","removeChild","_this$props","arc","arcOptions","bubbles","bubbleOptions","graticule","labels","updateChoroplethOptions","objectWithoutProperties","updateChoropleth","Datamaps","objectSpread","element","resize","_this2","style","propStyle","height","position","width","ref","c","React","Component","defaultProps","getAirports","radius","fillKey","borderWidth","borderOpacity","fillOpacity","getMapColors","defaultFill","Datamap_Datamap","geographyConfig","highlightOnHover","popupOnHover","fills","getNavClass","getIconClass","open","app","onToggleNav","onCloseNav","className","Link","to","onKeyDown","role","tabIndex","App","BrowserRouter","components_Menu","Route","exact","path","component","MapPage","TablePage","Boolean","location","hostname","match","initialState","arguments","undefined","action","loading","fetched","combineReducers","createStore","rootReducer","applyMiddleware","thunkMiddleware","logger","ReactDOM","render","es","store","components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3e21ef3e.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Option = ({ id, value, label }) => (\n  <option key={id} value={value}>\n    {label}\n  </option>\n);\n\nOption.propTypes = {\n  id: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n  value: PropTypes.string.isRequired\n};\n\nconst DropDown = ({ id, label, onUpdate, list, value }) => (\n  <React.Fragment>\n    <label htmlFor={id}>{label}</label>\n    <select\n      id={id}\n      value={value}\n      onChange={(e) => {\n        onUpdate(e.target.value);\n      }}\n    >\n      {list.map((option) => (\n        <Option key={option.id} {...option} />\n      ))}\n    </select>\n  </React.Fragment>\n);\n\nDropDown.propTypes = {\n  id: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n  onUpdate: PropTypes.func.isRequired,\n  list: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      value: PropTypes.string.isRequired,\n      label: PropTypes.string.isRequired\n    }).isRequired\n  ).isRequired,\n  value: PropTypes.string.isRequired\n};\n\nexport default DropDown;\n","import countries from '../data/countries/active-countries.json';\n\nconst countryList = countries.map((value) => {\n  return {\n    id: value.code,\n    label: value.name,\n    value: value.downloadCode\n  };\n});\n\nexport default countryList;\n","import * as d3 from 'd3';\nimport { scaleLinear } from 'd3-scale';\nimport airportsData from '../data/airports/filtred-airports.json';\n\nconst createColorRange = (limit) => {\n  return scaleLinear()\n    .domain([1, limit])\n    .interpolate(d3.interpolateHcl)\n    .range([d3.rgb('#007AFF'), d3.rgb('#FFF500')]);\n};\n\nconst getColors = () => {\n  const colorRanges = createColorRange(airportsData.length);\n\n  return airportsData.reduce((acc, value, index) => {\n    acc[value.ident] = colorRanges(index);\n    return acc;\n  }, {});\n};\n\nconst createAirports = () => {\n  return airportsData.map(({ name, ident, latitude, longitude }) => {\n    return {\n      name,\n      radius: 3,\n      latitude,\n      longitude,\n      fillKey: ident,\n      borderWidth: 0,\n      borderOpacity: 0,\n      fillOpacity: 1\n    };\n  });\n};\n\nconst getAirportById = (id) =>\n  airportsData.filter((value) => value.ident === id);\n\nexport { createAirports, getColors, getAirportById };\n","import { scaleSqrt } from 'd3-scale';\nimport { getAirportById } from './airports';\n\nconst getFileUrl = ({ country, measure }) => {\n  return `${\n    process.env.PUBLIC_URL\n  }/data/processed/avia_par_${country.toLowerCase()}_${measure}.json`;\n};\n\nconst createRange = (data, key) => {\n  const values = data.map((v) => parseInt(v[key], 10)).filter((v) => v);\n\n  return scaleSqrt()\n    .domain([Math.min(...values), Math.max(...values)])\n    .range([2, 30]);\n};\n\nconst getRoutes = (data) => {\n  return fetch(getFileUrl(data))\n    .then((response) => response.json())\n    .then((routesdData) => {\n      return routesdData;\n    });\n};\n\nconst parseRoutes = (routes, year) => {\n  const range = createRange(routes, year);\n\n  const values = routes\n    .map((value) => {\n      const departureAirport = getAirportById(value.departure.airport);\n      const arrivalAirport = getAirportById(value.arrival.airport);\n      if (\n        departureAirport.length &&\n        arrivalAirport.length &&\n        value[parseInt(year, 10)]\n      ) {\n        return {\n          origin: {\n            latitude: departureAirport[0].latitude,\n            longitude: departureAirport[0].longitude\n          },\n          destination: {\n            latitude: arrivalAirport[0].latitude,\n            longitude: arrivalAirport[0].longitude\n          },\n          options: {\n            strokeWidth: range(parseInt(value[year], 10)),\n            strokeColor: 'rgba(100, 10, 200, 0.4)',\n            greatArc: true\n          }\n        };\n      }\n      return false;\n    })\n    .filter((d) => d);\n  return values;\n};\n\nexport { parseRoutes, getRoutes };\n","import { getRoutes } from '../lib/routes.js';\nimport {\n  REQUEST_ROUTES,\n  RECEIVE_ROUTES,\n  INVALIDATE_ROUTES\n} from './actionTypes';\n\nexport const requestPosts = (data) => ({\n  type: REQUEST_ROUTES,\n  payload: {\n    data\n  }\n});\n\nexport const receiveRoutes = (data) => ({\n  type: RECEIVE_ROUTES,\n  payload: {\n    data\n  }\n});\n\nexport const invalidateRoutes = () => ({\n  type: INVALIDATE_ROUTES\n});\n\nconst fetchPosts = (data) => (dispatch) => {\n  dispatch(requestPosts(data));\n  return getRoutes(data).then((routes) => dispatch(receiveRoutes(routes)));\n};\n\nexport const fetchRoutesIfNeeded = () => (dispatch, getState) =>\n  dispatch(fetchPosts(getState().query));\n","export const SET_MEASURE = 'SET_MEASURE';\nexport const SET_YEAR = 'SET_YEAR';\nexport const SET_COUNTRY = 'SET_COUNTRY';\n\nexport const REQUEST_ROUTES = 'REQUEST_ROUTES';\nexport const INVALIDATE_ROUTES = 'INVALIDATE_ROUTES';\nexport const RECEIVE_ROUTES = 'RECEIVE_ROUTES';\n\nexport const TOGGLE_NAV = 'TOGGLE_NAV';\nexport const CLOSE_NAV = 'CLOSE_NAV';\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Radio = ({ value, checked, name, onUpdate }) => (\n  <span>\n    <input\n      type=\"radio\"\n      name={name}\n      value={value}\n      checked={checked}\n      onChange={(o) => {\n        onUpdate(o.target.value);\n      }}\n    />\n    {value}\n  </span>\n);\n\nRadio.propTypes = {\n  value: PropTypes.string.isRequired,\n  checked: PropTypes.bool.isRequired,\n  name: PropTypes.string.isRequired,\n  onUpdate: PropTypes.func.isRequired\n};\n\nexport default Radio;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport uniq from 'lodash.uniq';\n\nimport PropTypes from 'prop-types';\nimport ReactTable from 'react-table';\nimport DropDown from './DropDown';\nimport countryList from '../lib/countries';\nimport measures from '../config/measures.json';\nimport { setMeasure, setYear, setCountry } from '../actions/queryActions';\nimport { fetchRoutesIfNeeded } from '../actions/routeActions';\n\nimport 'react-table/react-table.css';\nimport Radio from './Radio';\n\nfunction getColumns(routes, year, onChangeYear) {\n  let baseCollums = [];\n  if (routes[0]) {\n    const whiteList = ['arrival', 'departure', 'tra_meas', 'unit'];\n    baseCollums = uniq(routes.map((v) => Object.keys(v)).flat())\n      .sort()\n      .map((v) => {\n        if (whiteList.indexOf(v) === -1) {\n          return {\n            Header: () => (\n              <Radio\n                value={v}\n                checked={year === v}\n                name=\"measure\"\n                onUpdate={onChangeYear}\n              />\n            ),\n            accessor: v,\n            Cell: (row) => <span>{row.value ? row.value : 0}</span>\n          };\n        }\n        return false;\n      })\n      .filter((v) => v);\n  }\n  return [\n    {\n      Header: 'Departure',\n      columns: [\n        // {\n        //   Header: 'Country',\n        //   accessor: 'departure.country'\n        // },\n        {\n          Header: 'Airport',\n          accessor: 'departure.airport'\n        }\n      ]\n    },\n    {\n      Header: 'Arrival',\n      columns: [\n        {\n          Header: 'Country',\n          accessor: 'arrival.country'\n        },\n        {\n          Header: 'Airport',\n          accessor: 'arrival.airport'\n        }\n      ]\n    },\n    {\n      Header: 'Info',\n      columns: [\n        // {\n        //   Header: 'Measure',\n        //   accessor: 'tra_meas'\n        // },\n        {\n          Header: 'Unit',\n          accessor: 'unit'\n        }\n      ]\n    },\n    {\n      Header: 'Years',\n      columns: [...baseCollums]\n    }\n  ];\n}\n\nfunction TablePage(props) {\n  const {\n    onChangeCountry,\n    onChangeYear,\n    onChangeMeasure,\n    country,\n    year,\n    measure,\n    onLoadRoutesIfNeeded,\n    routes\n  } = props;\n  return (\n    <div>\n      <div>\n        <DropDown\n          id=\"countries\"\n          value={country}\n          label=\"select country\"\n          list={countryList}\n          onUpdate={onChangeCountry}\n        />\n        {/* <DropDown\n          id=\"years\"\n          value={year}\n          label=\"select year\"\n          list={yearsList}\n          onUpdate={onChangeYear}\n        /> */}\n        <DropDown\n          id=\"measures\"\n          value={measure}\n          label=\"select measure\"\n          list={measures}\n          onUpdate={onChangeMeasure}\n        />\n        <button type=\"button\" onClick={onLoadRoutesIfNeeded}>\n          Load Routes\n        </button>\n        <button type=\"button\" onClick={onLoadRoutesIfNeeded}>\n          Load Airports\n        </button>\n      </div>\n      {routes.length ? (\n        <ReactTable\n          data={routes}\n          columns={getColumns(routes, year, onChangeYear)}\n        />\n      ) : null}\n    </div>\n  );\n}\nconst mapStateToProps = (state) => {\n  return {\n    year: state.query.year,\n    measure: state.query.measure,\n    country: state.query.country,\n    routes: state.routes.routes\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  {\n    onChangeCountry: setCountry,\n    onChangeYear: setYear,\n    onChangeMeasure: setMeasure,\n    onLoadRoutesIfNeeded: fetchRoutesIfNeeded\n  }\n)(TablePage);\n\nTablePage.propTypes = {\n  onChangeCountry: PropTypes.func.isRequired,\n  onChangeYear: PropTypes.func.isRequired,\n  onChangeMeasure: PropTypes.func.isRequired,\n  onLoadRoutesIfNeeded: PropTypes.func.isRequired,\n  country: PropTypes.string.isRequired,\n  year: PropTypes.string.isRequired,\n  measure: PropTypes.string.isRequired,\n  routes: PropTypes.arrayOf(\n    PropTypes.shape({\n      unit: PropTypes.string.isRequired,\n      tra_meas: PropTypes.string.isRequired,\n      arrival: PropTypes.shape({\n        airport: PropTypes.string.isRequired,\n        country: PropTypes.string.isRequired\n      }).isRequired,\n      depaurute: PropTypes.shape({\n        airport: PropTypes.string.isRequired,\n        country: PropTypes.string.isRequired\n      }).isRequired\n    }).isRequired\n  ).isRequired\n};\n","import { SET_MEASURE, SET_YEAR, SET_COUNTRY } from './actionTypes';\n\nexport const setMeasure = (measure) => ({\n  type: SET_MEASURE,\n  payload: {\n    measure\n  }\n});\n\nexport const setYear = (year) => ({\n  type: SET_YEAR,\n  payload: { year }\n});\n\nexport const setCountry = (country) => ({\n  type: SET_COUNTRY,\n  payload: { country }\n});\n","import React from 'react';\n\nfunction MainPage() {\n  return <h2>Home</h2>;\n}\n\nexport default MainPage;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport Datamaps from 'datamaps';\n\nconst MAP_CLEARING_PROPS = ['height', 'scope', 'setProjection', 'width'];\n\nconst propChangeRequiresMapClear = (oldProps, newProps) => {\n  return MAP_CLEARING_PROPS.some((key) => oldProps[key] !== newProps[key]);\n};\n\nexport default class Datamap extends React.Component {\n  static propTypes = {\n    arc: PropTypes.array,\n    arcOptions: PropTypes.object,\n    bubbleOptions: PropTypes.object,\n    bubbles: PropTypes.array,\n    data: PropTypes.object,\n    graticule: PropTypes.bool,\n    height: PropTypes.any,\n    labels: PropTypes.bool,\n    responsive: PropTypes.bool,\n    style: PropTypes.object,\n    updateChoroplethOptions: PropTypes.object,\n    width: PropTypes.any\n  };\n\n  static defaultProps = {\n    arcOptions: {},\n    data: {},\n    updateChoroplethOptions: {},\n    bubbleOptions: {},\n    style: {},\n    arc: [],\n    bubbles: [],\n    height: '',\n    width: '',\n    labels: false,\n    responsive: false,\n    graticule: false\n  };\n\n  constructor(props) {\n    super(props);\n    this.resizeMap = this.resizeMap.bind(this);\n  }\n\n  componentDidMount() {\n    const { responsive } = this.props;\n    if (responsive) {\n      window.addEventListener('resize', this.resizeMap);\n    }\n    this.drawMap();\n  }\n\n  componentWillReceiveProps(newProps) {\n    if (propChangeRequiresMapClear(this.props, newProps)) {\n      this.clear();\n    }\n  }\n\n  componentDidUpdate() {\n    this.drawMap();\n  }\n\n  componentWillUnmount() {\n    const { responsive } = this.props;\n    this.clear();\n    if (responsive) {\n      window.removeEventListener('resize', this.resizeMap);\n    }\n  }\n\n  clear() {\n    const { container } = this;\n\n    Array.from(container.childNodes).forEach((child) => {\n      container.removeChild(child);\n    });\n\n    delete this.map;\n  }\n\n  drawMap() {\n    const {\n      arc,\n      arcOptions,\n      bubbles,\n      bubbleOptions,\n      data,\n      graticule,\n      labels,\n      updateChoroplethOptions,\n      ...props\n    } = this.props;\n\n    let { map } = this;\n\n    if (!map) {\n      map = new Datamaps({\n        ...props,\n        data,\n        element: this.container\n      });\n      this.map = map;\n    } else {\n      map.updateChoropleth(data, updateChoroplethOptions);\n    }\n\n    if (arc) {\n      map.arc(arc, arcOptions);\n    }\n\n    if (bubbles) {\n      map.bubbles(bubbles, bubbleOptions);\n    }\n\n    if (graticule) {\n      map.graticule();\n    }\n\n    if (labels) {\n      map.labels();\n    }\n  }\n\n  resizeMap() {\n    this.map.resize();\n  }\n\n  render() {\n    const { style } = this.props;\n    const propStyle = {\n      height: '100%',\n      position: 'relative',\n      width: '100%',\n      ...style\n    };\n\n    return (\n      <div\n        ref={(c) => {\n          this.container = c;\n        }}\n        style={propStyle}\n      />\n    );\n  }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { parseRoutes } from '../lib/routes';\nimport { getColors, createAirports } from '../lib/airports';\nimport Datamap from './Datamap';\n\nconst getRoutes = (routes, year) => parseRoutes(routes, parseInt(year, 10));\n\nconst getAirports = () => {\n  return createAirports();\n};\n\nconst getMapColors = () => {\n  return {\n    defaultFill: '#ABDDA4',\n    // ...colors\n    ...getColors()\n  };\n};\n\nfunction MapPage({ routes, year }) {\n  return (\n    <Datamap\n      responsive\n      geographyConfig={{\n        highlightOnHover: false,\n        popupOnHover: false\n      }}\n      fills={getMapColors()}\n      arc={getRoutes(routes, year)}\n      bubbles={getAirports()}\n    />\n  );\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    routes: state.routes.routes,\n    year: state.query.year\n  };\n};\n\nexport default connect(mapStateToProps)(MapPage);\n\nMapPage.propTypes = {\n  routes: PropTypes.arrayOf(\n    PropTypes.shape({\n      arrival: PropTypes.shape({\n        airport: PropTypes.string.isRequired,\n        country: PropTypes.string.isRequired\n      }),\n      departure: PropTypes.shape({\n        airport: PropTypes.string.isRequired,\n        country: PropTypes.string.isRequired\n      }),\n      tra_meas: PropTypes.string.isRequired,\n      unit: PropTypes.string.isRequired\n    }).isRequired\n  ).isRequired,\n  year: PropTypes.string.isRequired\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { toggleNav, closeNav } from '../actions/appActions';\n\nimport './Menu.css';\n\nconst getNavClass = (state) => {\n  return state ? 'sidenav open' : 'sidenav';\n};\n\nconst getIconClass = (state) => {\n  return state ? 'sidenav-icon active' : 'sidenav-icon';\n};\n\nfunction Menu(props) {\n  const { open, onToggleNav, onCloseNav } = props;\n  return (\n    <div>\n      <div className={getNavClass(open)}>\n        <Link onClick={onCloseNav} to=\"/\">\n          Home\n        </Link>\n        <Link onClick={onCloseNav} to=\"/map/\">\n          Map\n        </Link>\n        <Link onClick={onCloseNav} to=\"/data/\">\n          Data\n        </Link>\n      </div>\n      <div\n        className={getIconClass(open)}\n        onClick={onToggleNav}\n        onKeyDown={onToggleNav}\n        role=\"button\"\n        tabIndex=\"0\"\n      >\n        <div className=\"bar1\" />\n        <div className=\"bar2\" />\n        <div className=\"bar3\" />\n      </div>\n    </div>\n  );\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    open: state.app.open\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  {\n    onToggleNav: toggleNav,\n    onCloseNav: closeNav\n  }\n)(Menu);\n\nMenu.propTypes = {\n  open: PropTypes.bool.isRequired,\n  onToggleNav: PropTypes.func.isRequired,\n  onCloseNav: PropTypes.func.isRequired\n};\n","import { TOGGLE_NAV, CLOSE_NAV } from './actionTypes';\n\nexport const toggleNav = () => ({\n  type: TOGGLE_NAV\n});\n\nexport const closeNav = () => ({\n  type: CLOSE_NAV\n});\n","import React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport TablePage from './TablePage.js';\nimport MainPage from './MainPage.js';\nimport MapPage from './MapPage.js';\nimport Menu from './Menu.js';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <Router>\n      <React.Fragment>\n        <Menu />\n        <Route exact path=\"/\" component={MainPage} />\n        <Route path=\"/map/\" component={MapPage} />\n        <Route path=\"/data/\" component={TablePage} />\n      </React.Fragment>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { SET_MEASURE, SET_YEAR, SET_COUNTRY } from '../actions/actionTypes';\n\nconst initialState = {\n  measure: 'PAS_BRD',\n  year: '2001',\n  country: 'PT'\n};\n\nconst query = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_MEASURE: {\n      return {\n        ...state,\n        measure: action.payload.measure\n      };\n    }\n    case SET_YEAR: {\n      return {\n        ...state,\n        year: action.payload.year\n      };\n    }\n    case SET_COUNTRY: {\n      return {\n        ...state,\n        country: action.payload.country\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n};\n\nexport default query;\n","import { TOGGLE_NAV, CLOSE_NAV } from '../actions/actionTypes';\n\nconst initialState = {\n  open: false\n};\n\nconst app = (state = initialState, action) => {\n  switch (action.type) {\n    case TOGGLE_NAV: {\n      return {\n        ...state,\n        open: !state.open\n      };\n    }\n    case CLOSE_NAV: {\n      return {\n        ...state,\n        open: false\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n};\n\nexport default app;\n","import {\n  REQUEST_ROUTES,\n  RECEIVE_ROUTES,\n  INVALIDATE_ROUTES\n} from '../actions/actionTypes';\n\nconst initialState = {\n  routes: [],\n  loading: false,\n  fetched: false\n};\n\nconst routes = (state = initialState, action) => {\n  switch (action.type) {\n    case REQUEST_ROUTES: {\n      return {\n        ...state,\n        loading: true\n      };\n    }\n    case RECEIVE_ROUTES: {\n      return {\n        ...state,\n        routes: action.payload.data,\n        fetched: true\n      };\n    }\n    case INVALIDATE_ROUTES: {\n      return {\n        ...state,\n        routes: [],\n        fetched: false\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n};\n\nexport default routes;\n","import { combineReducers } from 'redux';\nimport query from './query';\nimport app from './app';\nimport routes from './routes';\n\nexport default combineReducers({ query, app, routes });\n","import { applyMiddleware, createStore } from 'redux';\nimport logger from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport rootReducer from '../reducers/index';\n\nexport default createStore(\n  rootReducer,\n  applyMiddleware(thunkMiddleware, logger)\n);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}