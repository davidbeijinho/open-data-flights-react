{"version":3,"sources":["components/Datamap.js","components/DropDown.js","lib/countries.js","lib/years.js","lib/airports.js","lib/routes.js","App.js","serviceWorker.js","index.js"],"names":["MAP_CLEARING_PROPS","Datamap","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","resizeMap","bind","assertThisInitialized","responsive","window","addEventListener","drawMap","newProps","oldProps","some","key","propChangeRequiresMapClear","clear","removeEventListener","container","Array","from","childNodes","forEach","child","removeChild","map","_this$props","arc","arcOptions","bubbles","bubbleOptions","data","graticule","labels","updateChoroplethOptions","objectWithoutProperties","updateChoropleth","Datamaps","objectSpread","element","resize","_this2","style","propStyle","height","position","width","react_default","a","createElement","ref","c","React","Component","defaultProps","DropDown","_ref","id","label","onUpdate","list","value","Fragment","htmlFor","onChange","e","target","item","countryList","code","name","yearsList","toString","colors","getAirportById","airportsData","filter","ident","getRoutes","fetch","concat","process","country","toLowerCase","measure","getFileUrl","then","response","json","routesdData","range","values","v","parseInt","scaleSqrt","domain","Math","min","apply","toConsumableArray","max","createRange","year","departureAirport","departure","airport","arrivalAirport","arrival","length","origin","latitude","longitude","destination","options","strokeWidth","strokeColor","greatArc","d","airportsList","limit","colorRanges","scaleLinear","interpolate","d3","index","radius","fillKey","borderWidth","borderOpacity","fillOpacity","createAirports","App","state","showRoutes","routes","showAirports","airports","measures","setState","_this$state","_this3","_this$state2","Datamap_Datamap","geographyConfig","highlightOnHover","popupOnHover","fills","defaultFill","components_DropDown","onChangeCountry","onChangeYear","onChangeMeasure","type","onClick","drawRoutes","drawAirports","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a0067569.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport Datamaps from 'datamaps';\n\nconst MAP_CLEARING_PROPS = ['height', 'scope', 'setProjection', 'width'];\n\nconst propChangeRequiresMapClear = (oldProps, newProps) => {\n  return MAP_CLEARING_PROPS.some((key) => oldProps[key] !== newProps[key]);\n};\n\nexport default class Datamap extends React.Component {\n  static propTypes = {\n    arc: PropTypes.array,\n    arcOptions: PropTypes.object,\n    bubbleOptions: PropTypes.object,\n    bubbles: PropTypes.array,\n    data: PropTypes.object,\n    graticule: PropTypes.bool,\n    height: PropTypes.any,\n    labels: PropTypes.bool,\n    responsive: PropTypes.bool,\n    style: PropTypes.object,\n    updateChoroplethOptions: PropTypes.object,\n    width: PropTypes.any\n  };\n\n  static defaultProps = {\n    arcOptions: {},\n    data: {},\n    updateChoroplethOptions: {},\n    bubbleOptions: {},\n    style: {},\n    arc: [],\n    bubbles: [],\n    height: '',\n    width: '',\n    labels: false,\n    responsive: false,\n    graticule: false\n  };\n\n  constructor(props) {\n    super(props);\n    this.resizeMap = this.resizeMap.bind(this);\n  }\n\n  componentDidMount() {\n    const { responsive } = this.props;\n    if (responsive) {\n      window.addEventListener('resize', this.resizeMap);\n    }\n    this.drawMap();\n  }\n\n  componentWillReceiveProps(newProps) {\n    if (propChangeRequiresMapClear(this.props, newProps)) {\n      this.clear();\n    }\n  }\n\n  componentDidUpdate() {\n    this.drawMap();\n  }\n\n  componentWillUnmount() {\n    const { responsive } = this.props;\n    this.clear();\n    if (responsive) {\n      window.removeEventListener('resize', this.resizeMap);\n    }\n  }\n\n  clear() {\n    const { container } = this;\n\n    Array.from(container.childNodes).forEach((child) => {\n      container.removeChild(child);\n    });\n\n    delete this.map;\n  }\n\n  drawMap() {\n    const {\n      arc,\n      arcOptions,\n      bubbles,\n      bubbleOptions,\n      data,\n      graticule,\n      labels,\n      updateChoroplethOptions,\n      ...props\n    } = this.props;\n\n    let { map } = this;\n\n    if (!map) {\n      map = new Datamaps({\n        ...props,\n        data,\n        element: this.container\n      });\n      this.map = map;\n    } else {\n      map.updateChoropleth(data, updateChoroplethOptions);\n    }\n\n    if (arc) {\n      map.arc(arc, arcOptions);\n    }\n\n    if (bubbles) {\n      map.bubbles(bubbles, bubbleOptions);\n    }\n\n    if (graticule) {\n      map.graticule();\n    }\n\n    if (labels) {\n      map.labels();\n    }\n  }\n\n  resizeMap() {\n    this.map.resize();\n  }\n\n  render() {\n    const { style } = this.props;\n    const propStyle = {\n      height: '100%',\n      position: 'relative',\n      width: '100%',\n      ...style\n    };\n\n    return (\n      <div\n        ref={(c) => {\n          this.container = c;\n        }}\n        style={propStyle}\n      />\n    );\n  }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst DropDown = ({ id, label, onUpdate, list, value }) => (\n  <React.Fragment>\n    <label htmlFor={id}>{label}</label>\n    <select\n      id={id}\n      value={value}\n      onChange={(e) => {\n        onUpdate(e.target.value);\n      }}\n    >\n      {list.map((item) => {\n        return (\n          <option key={item.id} value={item.value}>\n            {item.label}\n          </option>\n        );\n      })}\n    </select>\n  </React.Fragment>\n);\n\nDropDown.propTypes = {\n  id: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n  onUpdate: PropTypes.func.isRequired,\n  list: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      value: PropTypes.string.isRequired,\n      label: PropTypes.string.isRequired\n    }).isRequired\n  ).isRequired,\n  value: PropTypes.string.isRequired\n};\n\nexport default DropDown;\n","import countries from '../data/countries/filtred-countries.json';\n\nconst countryList = countries.map((value) => {\n  return {\n    id: value.code,\n    label: value.name,\n    value: value.code\n  };\n});\n\nexport default countryList;\n","import years from '../config/years.json';\n\nconst yearsList = years.map((value) => {\n  return {\n    id: value.toString(),\n    label: value.toString(),\n    value: value.toString()\n  };\n});\n\nexport default yearsList;\n","import * as d3 from 'd3';\nimport { scaleLinear } from 'd3-scale';\nimport airportsData from '../data/airports/filtred-airports.json';\n\n// const color_scale = d3.scale.linear().domain([0, airportsData.length]).range(['beige', 'red']);\nconst colors = {};\n\nconst createColorRange = (limit) => {\n  return scaleLinear()\n    .domain([1, limit])\n    .interpolate(d3.interpolateHcl)\n    .range([d3.rgb('#007AFF'), d3.rgb('#FFF500')]);\n};\n\nconst createAirports = () => {\n  const colorRanges = createColorRange(airportsData.length);\n\n  return airportsData.map(({ name, ident, latitude, longitude }, index) => {\n    colors[ident] = colorRanges(index);\n    return {\n      name,\n      radius: 3,\n      latitude,\n      longitude,\n      fillKey: ident,\n      // borderColor\n      borderWidth: 0,\n      borderOpacity: 0,\n      fillOpacity: 1\n    };\n  });\n};\n\nconst getAirportById = (id) =>\n  airportsData.filter((value) => value.ident === id);\n\nexport { createAirports, colors, getAirportById };\n","import { scaleSqrt } from 'd3-scale';\nimport { getAirportById } from './airports';\n\nconst getFileUrl = (data) => {\n  return `${\n    process.env.PUBLIC_URL\n  }/data/processed/avia_par_${data.country.toLowerCase()}_${data.measure}.json`;\n};\n\nconst createRange = (data, key) => {\n  const values = data.map((v) => parseInt(v[key], 10)).filter((v) => v);\n\n  return scaleSqrt()\n    .domain([Math.min(...values), Math.max(...values)])\n    .range([2, 30]);\n};\n\nconst getRoutes = (data) => {\n  return fetch(getFileUrl(data))\n    .then((response) => response.json())\n    .then((routesdData) => {\n      const range = createRange(routesdData, data.year);\n      return routesdData\n        .map((value) => {\n          const departureAirport = getAirportById(value.departure.airport);\n          const arrivalAirport = getAirportById(value.arrival.airport);\n\n          if (\n            departureAirport.length &&\n            arrivalAirport.length &&\n            value[data.year]\n          ) {\n            return {\n              origin: {\n                latitude: departureAirport[0].latitude,\n                longitude: departureAirport[0].longitude\n              },\n              destination: {\n                latitude: arrivalAirport[0].latitude,\n                longitude: arrivalAirport[0].longitude\n              },\n              options: {\n                strokeWidth: range(parseInt(value[data.year], 10)),\n                strokeColor: 'rgba(100, 10, 200, 0.4)',\n                greatArc: true\n              }\n            };\n          }\n          return false;\n        })\n        .filter((d) => d);\n    });\n};\n\nexport default getRoutes;\n","import React, { Component } from 'react';\n// import Datamap from 'datamaps';\n\nimport Datamap from './components/Datamap';\n\nimport DropDown from './components/DropDown';\nimport countryList from './lib/countries';\nimport yearsList from './lib/years';\nimport measures from './config/measures.json';\nimport './App.css';\n\nimport { createAirports, colors } from './lib/airports';\nimport getRoutes from './lib/routes';\n\nconst airportsList = createAirports();\n\nclass App extends Component {\n  state = {\n    showRoutes: false,\n    routes: [],\n    showAirports: false,\n    airports: airportsList,\n    country: countryList[0].value,\n    measure: measures[0].value,\n    year: yearsList[0].value\n  };\n\n  onChangeCountry(data) {\n    this.setState({ country: data });\n  }\n\n  onChangeMeasure(data) {\n    this.setState({ measure: data });\n  }\n\n  onChangeYear(data) {\n    this.setState({ year: data });\n  }\n\n  drawRoutes() {\n    const { showRoutes, measure, country, year } = this.state;\n    if (showRoutes) {\n      this.setState({ routes: [] });\n    } else {\n      getRoutes({\n        measure,\n        country,\n        year\n      }).then((routes) => {\n        this.setState({ routes });\n      });\n    }\n    this.setState({ showRoutes: !showRoutes });\n  }\n\n  drawAirports() {\n    const { showAirports } = this.state;\n    if (showAirports) {\n      this.setState({ airports: [] });\n    } else {\n      this.setState({ airports: airportsList });\n    }\n    this.setState({ showAirports: !showAirports });\n  }\n\n  render() {\n    const { airports, routes, measure, country, year } = this.state;\n    return (\n      <div>\n        <Datamap\n          responsive\n          geographyConfig={{\n            highlightOnHover: false,\n            popupOnHover: false\n          }}\n          fills={{\n            defaultFill: '#ABDDA4',\n            ...colors\n          }}\n          bubbles={airports}\n          arc={routes}\n        />\n\n        <DropDown\n          id=\"countries\"\n          value={country}\n          label=\"select country\"\n          list={countryList}\n          onUpdate={(d) => {\n            this.onChangeCountry(d);\n          }}\n        />\n        <DropDown\n          id=\"years\"\n          value={year}\n          label=\"select year\"\n          list={yearsList}\n          onUpdate={(d) => {\n            this.onChangeYear(d);\n          }}\n        />\n        <DropDown\n          id=\"measures\"\n          value={measure}\n          label=\"select measure\"\n          list={measures}\n          onUpdate={(d) => {\n            this.onChangeMeasure(d);\n          }}\n        />\n        <button\n          type=\"button\"\n          onClick={() => {\n            this.drawRoutes();\n          }}\n        >\n          Routes\n        </button>\n        <button\n          type=\"button\"\n          onClick={() => {\n            this.drawAirports();\n          }}\n        >\n          Airports\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}